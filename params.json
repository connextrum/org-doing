{
  "name": "Org-doing",
  "tagline": "keep track of what you're doing right now and what you've worked on before",
  "body": "# org-doing\r\n\r\n[![Build Status](https://travis-ci.org/omouse/org-doing.svg)](https://travis-ci.org/omouse/org-doing)\r\n[![MELPA](http://melpa.org/packages/org-doing-badge.svg)](http://melpa.org/#/org-doing)\r\n[![License](http://img.shields.io/:license-gpl3-blue.svg)](http://www.gnu.org/licenses/gpl-3.0.html)\r\n[![Flattr This](http://button.flattr.com/flattr-badge-large.png)](https://flattr.com/submit/auto?fid=y0jx3j&url=https%3A%2F%2Fgithub.com%2Fomouse%2Forg-doing)\r\n\r\nInspired by [doing](https://github.com/ttscoff/doing/), a set of\r\nfunctions for keeping track of what you're doing right now.\r\n\r\n## How it works\r\n\r\nCreates a `doing.org` file in your home directory (or wherever\r\n`org-doing-file` points to). The file has two sections: now and\r\nlater. The now section lists things you are currently working on. The\r\nlater section lists things you want to work on later.\r\n\r\n## Use it\r\n\r\n### Org-Doing Functions\r\n\r\nLog what you're doing now:\r\n\r\n    M-x org-doing-log\r\n\r\nLog what you're doing later:\r\n\r\n    C-u M-x org-doing-log\r\n\r\nLog something you've already done:\r\n\r\n    M-x org-doing-done\r\n\r\nMark your most recent TODO as DONE:\r\n\r\n    M-x org-doing-done\r\n    (don't enter anything and press Enter)\r\n\r\n### Org-Doing Omni Function\r\n\r\nThe omni function lets you enter short-hands at the beginning, making it very quick to use org-doing:\r\n\r\n    M-x org-doing\r\n    now reviewing email, getting ready for a nap. seriously\r\n\r\nThe \"now\" is parsed and the `org-doing-log` function is called with\r\nthe rest of the string. It's the same as doing this:\r\n\r\n    M-x org-doing-log\r\n    reviewing email, getting ready for a nap. seriously\r\n\r\nThis is also works for later and for done:\r\n\r\n    M-x org-doing\r\n    later adding more cool features to org-doing mode\r\n\r\n    M-x org-doing\r\n    done added something simply amazing to org-doing mode\r\n\r\n    M-x org-doing\r\n    done\r\n\r\n## From The Bash Command-Line\r\n\r\nYou can also use org-doing from the command line by defining the\r\n`ORG_DOING_PATH` environment variable to the location of\r\n`org-doing.el` and by sourcing `org-doing.bash`:\r\n\r\n    ORG_DOING_PATH=/path/to/org-doing.el\r\n    source /path/to/org-doing.bash\r\n    doing now awesome stuff\r\n    doing later more awesome\r\n    doing done something cool\r\n    doing done\r\n\r\n# Hacking on org-doing\r\n\r\nStart by installing all the dependencies in the Caskfile:\r\n\r\n    cask install\r\n\r\nWe use GNU Make for running unit tests, feature tests and for installing org-doing.\r\n\r\nRun the tests:\r\n\r\n    make test\r\n    make unit # run the unit tests using ERT\r\n    make ecukes # run the feature tests using ecukes\r\n\r\n[ERT](https://www.gnu.org/software/emacs/manual/html_mono/ert.html) is the Emacs Lisp Regression Testing framework. [Ecukes](https://github.com/ecukes/ecukes) is an implementation of Cucumber/BDD. [El-mock](http://emacswiki.org/emacs/EmacsLispMock) is used for mock objects/stubbing in the unit tests.\r\n\r\nUnit tests are in the `test/` directory. Higher level/integration/functional specs are in the `features/` directory.\r\n\r\n# Contributors\r\n\r\n* Adrien Becchis @AdrieanKhisbe\r\n* Bjarte Johansen @ljos\r\n* Greg Lucas @glucas\r\n* Rudolf Olah @omouse\r\n* Steve Purcell @purcell\r\n* Syohei YOSHIDA @syohex\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}